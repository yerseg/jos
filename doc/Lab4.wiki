h1. Лабораторная работа №4

Для получения файлов, необходимых для выполнения работы, следует обновить удаленный репозиторий, создать новую ветвь под названием working-lab4, после чего выполнить слияние с ней ветви lab4, которая появилась в репозитории. О работе с git можно прочитать на [[GitManual|соответствующей странице]].

Представленные ниже задания посвящены работе с часами реального времени (RTC — Real-Time Clock). Часы реального времени являются одним из механизмов работы с реальным временем в процессорах Intel (существуют и другие механизмы: улучшенный программируемый контроллер прерываний APIC, программируемый интервальный таймер PIT и т. д.). Работа с реальным временем необходима для реализации планировщика процессов, который должен учитывать и контролировать время работы каждого процесса.

После запуска компьютера прерывания от часов реального времени отключены. После инициализации часы будут периодически генерировать прерывание 8 (IRQ_CLOCK).

Для управления часами используются три байта в памяти CMOS, называемые регистрами A, B и C. Для работы с этими регистрами используются порты ввода-вывода 0x70 и 0x71 (в JOS для работы с ними используются константы CMOS_CMD и CMOS_DATA).

Более подробная информация о работе с часами содержится в их документации, которая находится в файлах проекта настоящего курса (Файлы/Standards/rtc.pdf).

h2. Задание №1

_Допишите вспомогательные функции для наботой с CMOS/регистрами RTC (cmos_read8() и cmos_write8()). Обратите внимание на то, что после обращения к выбранному регистру CMOS, номер регистра сбрасывается на нулевой._

h2. Задание №2

_С помощью разработанных в первом задании функций выведите содержимое CMOS-памяти в команде монитора @dumpcmos@. Для того, чтобы войти в монитор, временно добавьте вызов @assert(false)@ в начало выполнения кода ядра._

h2. Задание №3

_Необходимо дописать в файле kern/kclock.c недостающий код функций rtc_timer_init(), в которой происходит инициализация часов rtc, и rtc_check_status, в которой происходит проверка статуса часов. Алгоритм инициализации выглядит следующим образом:_

_1. Переключение на регистр часов B._

_2. Чтение значения регистра B из порта ввода-вывода._

_3. Установка бита RTC_PIE._

_4. Запись обновленного значения регистра в порт ввода-вывода._

_Для проверки статуса часов в функции rtc_check_status() необходимо прочитать значение регистра часов C._

h2. Задание №4

_Во время выполнения кода ядра ОC прерывания на процессоре должны быть замаскированы. Это является архитектурной особенностью ядра JOS. Для этого необходимо расставить в файле kern/entry.S в нужных местах две инструкции cli, которые осуществляют маскирование прерываний._

h2. Задание №5

_После инициализации часов RTC и программируемого контроллера прерываний PIC необходимо размаскировать на контроллере линию IRQ_CLOCK, по которой приходят прерывания от часов. Для этого можно использовать функцию pic_irq_unmask(). Для обработки прерываний следует настроить соответствующий вектор в таблице IDT в функции trap_init()._ 

h2. Задание №6

_После того, как прерывание сгенерировано и обработано, перед вызовом планировщика необходимо прочесть регистр статуса RTC и отправить сигнал EOI на контроллер прерываний, сигнализируя об окончании обработки прерывания. Иначе дальнейшие прерывания от часов не будут генерироваться PIC. Для этого можно использовать функции rtc_check_status(), pic_send_eoi()._

Выполнив эти задания и запустив команду JOSLLVM=0 (или JOSLLVM=1) make qemu, вы увидите примерно следующий результат:

<pre>
6828 decimal is 15254 octal!
END: 0x8041674000
enabled interrupts: 2
enabled interrupts: 2 8
Framebuffer initialised
[00001000] env started: RUNNABLE
[00001000] env stopped: RUNNING
[00001001] env started: RUNNABLE
TEST2 LOADED.
[00001001] env stopped: RUNNING
[00001002] env started: RUNNABLE
[00001002] env stopped: RUNNING
[00001003] env started: RUNNABLE
TEST4 LOADED.
[00001003] env stopped: RUNNING
[00001000] env started: RUNNABLE
[00001000] env stopped: RUNNING
[00001001] env started: RUNNABLE
[00001001] env stopped: RUNNING
[00001002] env started: RUNNABLE
[00001002] env stopped: RUNNING
[00001003] env started: RUNNABLE
[00001003] env stopped: RUNNING
[00001000] env started: RUNNABLE
[00001000] env stopped: RUNNING
[00001001] env started: RUNNABLE
[00001001] env stopped: RUNNING
[00001002] env started: RUNNABLE
[00001002] env stopped: RUNNING
[00001003] env started: RUNNABLE
[00001003] env stopped: RUNNING
[00001000] env started: RUNNABLE
[00001000] env stopped: FREE
[00001001] env started: RUNNABLE
[00001001] env stopped: RUNNING
[00001002] env started: RUNNABLE
[00001002] env stopped: FREE
[00001003] env started: RUNNABLE
[00001003] env stopped: RUNNING
[00001001] env started: RUNNABLE
[00001001] env stopped: RUNNING
[00001003] env started: RUNNABLE
[00001003] env stopped: RUNNING
[00001001] env started: RUNNABLE
[00001001] env stopped: FREE
[00001003] env started: RUNNABLE
[00001003] env stopped: RUNNING
[00001003] env started: RUNNING
[00001003] env stopped: RUNNING
.....
</pre>

h2. Задание №7

_В данный момент часы реального времени работают на некой стандартной частоте. Измените процедуру rtc_timer_init так, чтобы прерывания от часов приходили один раз в полсекунды. Для этого необходимо изменить делитель частоты, которому соответствуют младшие 4 бита регистра часов A._

_По окончании выполнения работы следует сохранить внесенные изменения и отправить их в удаленный репозиторий._